#pragma once
#include "CoreMinimal.h"
#include "Components/ActorComponent.h"
#include "SKH_MultiShooting/HUD/PlayerHUD.h"
#include "SKH_MultiShooting/Weapon/WeaponTypes.h"

#include "CombatComponent.generated.h"

#define TRACE_LENGTH 8000.f

UCLASS( ClassGroup=(Custom), meta=(BlueprintSpawnableComponent) )
class SKH_MULTISHOOTING_API UCombatComponent : public UActorComponent
{
	GENERATED_BODY()

public:	
	friend class APlayerCharacter;

	UCombatComponent();
	virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;

	// 복제용 함수
	virtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;

	void EquipWeapon(class AWeapon* WeaponToEquip);
	void Reload();

protected:
	virtual void BeginPlay() override;
	void SetAiming(bool bIsAiming);

	UFUNCTION(Server, Reliable)
	void ServerSetAiming(bool bIsAiming);

	UFUNCTION()
	void OnRep_EquippedWeapon();

	void FireButtonPressed(bool bPressed);

	// 발사용 함수
	void Fire();

	// 복사용 함수
	UFUNCTION(Server, Reliable)
	void ServerFire(const FVector_NetQuantize& TraceHitTarget);

	UFUNCTION(NetMulticast, Reliable)
	void MulticastFire(const FVector_NetQuantize& TraceHitTarget);

	// 충돌판정용
	void TraceUnderCrosshairs(FHitResult& TraceHitResult);

	// 크로스헤어 세팅
	void SetHUDCrosshairs(float DeltaTime);

	// 리로드 RPC
	UFUNCTION(Server, Reliable)
	void ServerReload();


private:
	UPROPERTY()
	class APlayerCharacter* Character;

	UPROPERTY()
	class AFirstPlayerController* Controller;

	UPROPERTY()
	class APlayerHUD* HUD;

	UPROPERTY(ReplicatedUsing = OnRep_EquippedWeapon)
	class AWeapon* EquippedWeapon;

	UPROPERTY(Replicated)
	bool bAiming;

	UPROPERTY(EditAnywhere)
	float BaseWalkSpeed;

	UPROPERTY(EditAnywhere)
	float AimWalkSpeed;

	bool bFireButtonPressed;

	// HUD와 크로스헤어
	FHUDPackage HUDPackage;
	float CrosshairVelocityFactor;
	float CrosshairInAirFactor;
	float CrosshairShootingFactor;
	float CrosshairAimFactor;

	// 조준위치
	FVector HitTarget;

	// 조준(Aim)과 FOV
	float DefaultFOV;

	UPROPERTY(EditAnywhere, Category = Combat)
	float ZoomedFOV = 30.f;

	float CurrentFOV;

	UPROPERTY(EditAnywhere, Category = Combat)
	float ZoomInterpSpeed = 20.f;

	void InterpFOV(float DeltaTime);

	// 연속발사를 위한 타이머
	FTimerHandle FireTimer; // 타이머 핸들
	bool bCanFire = true; // 점화식 불변수
	void StartFireTimer(); // 시작함수
	void FireTimerFinished(); // 콜백함수

	bool CanFire(); // 탄약이있을때만 발사할 수 있도록

	// 소지한탄창은 바로업데이트되어야하기때문에 컴포넌트 클래스에서 소지한다. 플레이어는 소유중인 무기의 모든 타입의 탄창갯수를 별도로 저장하지 않는다. 현재 장착중인 무기에 관해서만 값을 가진다.
	UPROPERTY(ReplicatedUsing = OnRep_CarriedAmmo)
	int32 CarriedAmmo;

	UFUNCTION()
	void OnRep_CarriedAmmo();

	// 무기의 타입에따라 소지하는 탄약의 갯수를 TMap으로 저장
	TMap<EWeaponType, int32> CarriedAmmoMap;

	UPROPERTY(EditAnywhere)
	int32 StartingARAmmo = 30;

	void InitializeCarriedAmmo();

public:	
	void SetMaxWalkSpeed(float Value);
	
};
